import { auth } from '@/auth'
import { redirect } from 'next/navigation'
import prisma from '@/lib/prisma'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { CustomerAcquisitionChart } from '@/components/dashboard/customer-acquisition-chart'
import { TopCustomersTable } from '@/components/dashboard/top-customers-table'
import { Users, User, TrendingUp } from 'lucide-react'

export default async function CustomersPage() {
  const session = await auth()

  if (!session?.user) {
    redirect('/sign-in')
  }

  // Check if user is admin
  const user = await prisma.user.findUnique({
    where: {
      id: session.user.id,
    },
  })

  if (user?.role !== 'ADMIN') {
    redirect('/dashboard')
  }

  // Get all users with their orders
  const users = await prisma.user.findMany({
    include: {
      orders: {
        include: {
          items: true,
        },
      },
    },
  })

  // Calculate metrics
  const totalCustomers = users.length
  
  // A user is considered "returning" if they have more than one order
  const returningCustomers = users.filter(user => user.orders.length > 1).length
  const newCustomers = totalCustomers - returningCustomers
  
  // Calculate percentage of returning customers
  const returningPercentage = totalCustomers > 0 
    ? Math.round((returningCustomers / totalCustomers) * 100) 
    : 0
  
  // Calculate total revenue generated by each customer
  const customersWithRevenue = users.map(user => {
    const totalSpent = user.orders.reduce((total, order) => {
      return total + Number(order.total)
    }, 0)
    
    const totalOrders = user.orders.length
    
    return {
      id: user.id,
      name: user.name || 'Anonymous',
      email: user.email,
      image: user.image,
      totalSpent,
      totalOrders,
      averageOrderValue: totalOrders > 0 ? totalSpent / totalOrders : 0,
      firstOrderDate: user.orders.length > 0 
        ? new Date(Math.min(...user.orders.map(order => new Date(order.createdAt).getTime())))
        : null,
      lastOrderDate: user.orders.length > 0 
        ? new Date(Math.max(...user.orders.map(order => new Date(order.createdAt).getTime())))
        : null,
    }
  })
  
  // Sort customers by total spent (descending) and get top 10
  const topCustomers = [...customersWithRevenue]
    .sort((a, b) => b.totalSpent - a.totalSpent)
    .slice(0, 10)
  
  // Group users by registration month for acquisition chart
  const currentDate = new Date()
  const last12Months = Array.from({ length: 12 }, (_, i) => {
    const date = new Date(currentDate)
    date.setMonth(currentDate.getMonth() - (11 - i))
    return date
  })
  
  const customerAcquisitionData = last12Months.map(month => {
    const year = month.getFullYear()
    const monthIndex = month.getMonth()
    
    const newUsers = users.filter(user => {
      if (!user.createdAt) return false
      const createdAt = new Date(user.createdAt)
      return createdAt.getFullYear() === year && createdAt.getMonth() === monthIndex
    }).length
    
    return {
      month: `${month.toLocaleString('default', { month: 'short' })} ${year}`,
      newUsers,
    }
  })

  return (
    <div className='space-y-8'>
      <div>
        <h2 className='text-3xl font-bold tracking-tight'>Customer Insights</h2>
        <p className='text-muted-foreground'>
          Analyze customer behavior and identify valuable segments
        </p>
      </div>

      <div className='grid gap-4 md:grid-cols-3'>
        <Card>
          <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>
            <CardTitle className='text-sm font-medium'>Total Customers</CardTitle>
            <Users className='h-4 w-4 text-muted-foreground' />
          </CardHeader>
          <CardContent>
            <div className='text-2xl font-bold'>{totalCustomers}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>
            <CardTitle className='text-sm font-medium'>Returning Customers</CardTitle>
            <User className='h-4 w-4 text-muted-foreground' />
          </CardHeader>
          <CardContent>
            <div className='flex items-baseline space-x-2'>
              <div className='text-2xl font-bold'>{returningCustomers}</div>
              <Badge variant='outline' className='bg-green-50'>
                {returningPercentage}%
              </Badge>
            </div>
            <p className='text-xs text-muted-foreground'>
              {newCustomers} new customers
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>
            <CardTitle className='text-sm font-medium'>Customer Distribution</CardTitle>
            <TrendingUp className='h-4 w-4 text-muted-foreground' />
          </CardHeader>
          <CardContent>
            <div className='flex h-[60px] items-center'>
              {totalCustomers > 0 ? (
                <div className='flex w-full rounded-full overflow-hidden'>
                  <div 
                    className='bg-blue-500 h-4' 
                    style={{ width: `${returningPercentage}%` }}
                  />
                  <div 
                    className='bg-gray-200 h-4' 
                    style={{ width: `${100 - returningPercentage}%` }}
                  />
                </div>
              ) : (
                <p className='text-sm text-muted-foreground'>No customer data available</p>
              )}
            </div>
            <div className='flex justify-between mt-2 text-xs'>
              <span className='text-blue-500'>Returning ({returningPercentage}%)</span>
              <span className='text-gray-500'>New ({100 - returningPercentage}%)</span>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className='flex items-center gap-2'>
            <TrendingUp className='h-5 w-5 text-blue-500' />
            Customer Acquisition
          </CardTitle>
        </CardHeader>
        <CardContent>
          <CustomerAcquisitionChart data={customerAcquisitionData} />
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className='flex items-center gap-2'>
            <Users className='h-5 w-5 text-blue-500' />
            Top Customers by Revenue
          </CardTitle>
        </CardHeader>
        <CardContent>
          {topCustomers.length === 0 ? (
            <div className='text-center py-6 text-muted-foreground'>No customer data available</div>
          ) : (
            <TopCustomersTable customers={topCustomers} />
          )}
        </CardContent>
      </Card>
    </div>
  )
} 