import { NextResponse } from 'next/server'
import { headers } from 'next/headers'
import prisma from '@/lib/prisma'
import Stripe from 'stripe'

// –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –∫–ª—é—á–µ–π
const DUMMY_WEBHOOK_SECRET = 'whsec_testing123'
const stripeApiKey = process.env.STRIPE_SECRET_KEY || 'sk_test_dummy'
const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET || DUMMY_WEBHOOK_SECRET
const stripe = new Stripe(stripeApiKey)

// –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞—â–∏—Ç—É CSRF –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
export const config = {
  api: {
    bodyParser: false,
  },
}

export async function POST(req: Request) {
  try {
    const body = await req.text()
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ stripe-signature
    const signature = req.headers.get('stripe-signature') || ''

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    let event
    let isTestMode = false

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –∑–∞–≥–ª—É—à–∫–∏
    if (stripeApiKey === 'sk_test_dummy' || webhookSecret === DUMMY_WEBHOOK_SECRET) {
      console.log('[STRIPE WEBHOOK] Running in test mode')
      isTestMode = true
      
      // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      try {
        event = JSON.parse(body)
      } catch (err) {
        return new NextResponse('Invalid JSON', { status: 400 })
      }
    } else {
      // –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Stripe
      try {
        event = stripe.webhooks.constructEvent(body, signature, webhookSecret)
      } catch (err) {
        console.error(`‚ö†Ô∏è Webhook signature verification failed:`, err)
        return new NextResponse(
          `Webhook signature verification failed: ${err instanceof Error ? err.message : 'Unknown error'}`,
          { status: 400 }
        )
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    switch (event.type) {
      case 'payment_intent.succeeded':
        await handlePaymentIntentSucceeded(event.data.object, isTestMode)
        break
        
      case 'payment_intent.payment_failed':
        await handlePaymentIntentFailed(event.data.object, isTestMode)
        break
        
      case 'checkout.session.completed':
        await handleCheckoutSessionCompleted(event.data.object, isTestMode)
        break
        
      default:
        console.log(`Unhandled event type: ${event.type}`)
    }

    return NextResponse.json({ received: true })
  } catch (error) {
    console.error('Webhook error:', error)
    return new NextResponse(
      `Webhook error: ${error instanceof Error ? error.message : 'Unknown error'}`,
      { status: 500 }
    )
  }
}

async function handlePaymentIntentSucceeded(
  paymentIntent: Stripe.PaymentIntent,
  isTestMode: boolean
) {
  try {
    console.log(`üí∞ Payment intent succeeded: ${paymentIntent.id}`)
    
    if (isTestMode) {
      console.log('[TEST MODE] Would update order status to PAID')
      return
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const orderId = paymentIntent.metadata.orderId
    
    if (!orderId) {
      console.error('No orderId found in payment intent metadata')
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await prisma.order.update({
      where: { id: orderId },
      data: {
        status: 'DELIVERED',
        paymentIntentId: paymentIntent.id,
      },
    })
    
    console.log(`‚úÖ Order ${orderId} marked as paid`)
  } catch (error) {
    console.error('Error processing payment success:', error)
  }
}

async function handlePaymentIntentFailed(
  paymentIntent: Stripe.PaymentIntent,
  isTestMode: boolean
) {
  try {
    console.log(`‚ùå Payment intent failed: ${paymentIntent.id}`)
    
    if (isTestMode) {
      console.log('[TEST MODE] Would update order status to FAILED')
      return
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const orderId = paymentIntent.metadata.orderId
    
    if (!orderId) {
      console.error('No orderId found in payment intent metadata')
      return
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await prisma.order.update({
      where: { id: orderId },
      data: {
        status: 'CANCELLED',
        paymentIntentId: paymentIntent.id,
      },
    })
    
    console.log(`‚ùå Order ${orderId} marked as failed`)
  } catch (error) {
    console.error('Error processing payment failure:', error)
  }
}

async function handleCheckoutSessionCompleted(
  session: Stripe.Checkout.Session,
  isTestMode: boolean
) {
  try {
    console.log(`üõí Checkout session completed: ${session.id}`)
    
    if (isTestMode) {
      console.log('[TEST MODE] Would create order from checkout session')
      return
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Å—Å–∏–∏
    // –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ
    
    // –ü—Ä–∏–º–µ—Ä:
    // const customerId = session.customer
    // const orderId = session.metadata?.orderId
    // 
    // if (orderId) {
    //   await prisma.order.update({
    //     where: { id: orderId },
    //     data: { status: 'PROCESSING' }
    //   })
    // }
  } catch (error) {
    console.error('Error processing checkout session:', error)
  }
} 