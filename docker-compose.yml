version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${PORT:-3000}:3000"
    env_file:
      - .env.production
    volumes:
      - app-backups:/app/backups
    depends_on:
      - postgres
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database
  postgres:
    image: postgres:14-alpine
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_DB=${DB_NAME:-ai-amazona}
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx for SSL termination and reverse proxy
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - app
    networks:
      - app-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - app-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - app-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    networks:
      - app-network
    depends_on:
      - prometheus

  # Backup cron job service
  backup:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    volumes:
      - app-backups:/app/backups
    env_file:
      - .env.production
    networks:
      - app-network
    entrypoint: "/bin/sh -c 'npm install -g node-cron && node -e \"const cron = require(\"node-cron\"); cron.schedule(\"0 1 * * *\", () => { require(\"./backup.config.js\").backupDatabase(\"daily\"); }); cron.schedule(\"0 2 * * 0\", () => { require(\"./backup.config.js\").backupDatabase(\"weekly\"); }); cron.schedule(\"0 3 1 * *\", () => { require(\"./backup.config.js\").backupDatabase(\"monthly\"); }); console.log(\"Backup cron job started\"); while(true) { sleep(3600); }\")'"

volumes:
  postgres-data:
  app-backups:
  prometheus-data:
  grafana-data:

networks:
  app-network:
    driver: bridge 